<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>志颖の博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-12-19T17:32:17.020Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>黄志颖</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CoreLocation框架</title>
    <link href="http://yoursite.com/2017/12/19/CoreLocation%E6%A1%86%E6%9E%B6/"/>
    <id>http://yoursite.com/2017/12/19/CoreLocation框架/</id>
    <published>2017-12-18T23:17:37.000Z</published>
    <updated>2017-12-19T17:32:17.020Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;&emsp;CoreLocation 框架可用于定位设备当前的经纬度，通过该框架，应用程序可通过附近的蜂窝基站、WIFI信号或者GPS等信息计算用户位置。其中 CLLocationManager 是整个 CoreLocation 框架的核心，定位、方向检测、区域检测等都由该API完成。<br><a id="more"></a></p><h4 id="定位服务"><a href="#定位服务" class="headerlink" title="定位服务"></a>定位服务</h4><blockquote><ul><li>标准定位: GPS/WIFI/蓝牙/基站 (具体使用哪个定位,由苹果内部自行决定)</li><li>蓝牙: 如果当前设备无法完成定位服务,可以通过蓝牙连接”A设备”, 使用”A设备”进行定位, 当然定位获得的是”A设备”所在位置信息。</li><li>基站定位(必须有电话卡): 手机处于基站覆盖范围内, 定位到的位置是基站所在的位置,不是手机所在的位置。</li><li>WIFI 定位: 通过无线卡搜集周围所有的 WIFI 热点, 获得其 MAC 地址,然后通过 Apple 云端服务器查询该 WiFi 热点是否已经登记，如果已经登记，即可获取该WiFi热点的位置，最后通过对多个WiFi热点折中计算得到当前位置并返给iOS设备。</li></ul></blockquote><h5 id="开启定位服务"><a href="#开启定位服务" class="headerlink" title="开启定位服务"></a>开启定位服务</h5><blockquote><ul><li><p>案例要求: 打印获得的定位信息( 格式: “北偏东” 30度, 移动了8米 )。</p></li><li><p>精确度: 定位精确准度越高, 越耗电, 定位所需时间越长, 尽量在满足要求的情况下, 使用低精确度。</p><ul><li>kCLLocationAccuracyBestForNavigation -&gt; 最适合的定位</li><li>kCLLocationAccuracyBest -&gt; 10米误差</li><li>kCLLocationAccuracyNearestTenMeters -&gt; 100米误差</li><li>kCLLocationAccuracyKilometer -&gt; 1000米误差</li><li>kCLLocationAccuracyThreeKilometers -&gt; 3000米误差</li></ul></li></ul></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> CoreLocation</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainViewController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 管理者对象(iOS8.0 以后,如要使用定位服务,必须主动请求用户授权)</span></span><br><span class="line">    <span class="built_in">lazy</span> <span class="keyword">var</span> locationM: <span class="type">CLLocationManager</span> = &#123;</span><br><span class="line">        <span class="keyword">let</span> locationM = <span class="type">CLLocationManager</span>()</span><br><span class="line">        locationM.delegate = <span class="keyword">self</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// iOS8.0 及以后版本,需要主动请求用户授权</span></span><br><span class="line">        <span class="keyword">if</span> #available(iOS <span class="number">8.0</span>, *) &#123;</span><br><span class="line">            <span class="comment">// 请求开启"前台定位授权",退到后台,定位服务可用,"有蓝条"</span></span><br><span class="line">            <span class="comment">// info.plist 必须存在: "NSLocationWhenInUseUsageDescription"</span></span><br><span class="line">            locationM.requestWhenInUseAuthorization()</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 请求开启"前后台定位授权",退到后台定位服务可用,"无蓝条"(优先级比前台定位授权高)</span></span><br><span class="line">            <span class="comment">// "info.plist" 中必须存在: "NSLocationAlwaysAndWhenInUseUsageDescription" 和 "NSLocationWhenInUseUsageDescription"</span></span><br><span class="line">            locationM.requestAlwaysAuthorization()</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// iOS9.0 及以上版本, 如要实现后台定位, "info.plist" 文件中必须存在: "UIBackgroundModes"</span></span><br><span class="line">            <span class="comment">// 并且,将 "allowsBackgroundLocationUpdates" 属性设置为 "true"</span></span><br><span class="line">            <span class="keyword">if</span> #available(iOS <span class="number">9.0</span>, *) &#123;</span><br><span class="line">                locationM.allowsBackgroundLocationUpdates = <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 设置定位执行条件(距离100.0米)</span></span><br><span class="line">        locationM.distanceFilter = <span class="number">100.0</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 设置定位精确度</span></span><br><span class="line">        locationM.desiredAccuracy = kCLLocationAccuracyBestForNavigation;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> locationM;</span><br><span class="line">    &#125;()</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 记录上一次位置信息</span></span><br><span class="line">    <span class="keyword">var</span> previousLocation: <span class="type">CLLocation</span>?</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 点击屏幕,开始定位</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">touchesBegan</span><span class="params">(<span class="number">_</span> touches: Set&lt;UITouch&gt;, with event: UIEvent?)</span></span> &#123;</span><br><span class="line">        <span class="comment">// 开启定位服务(推荐)</span></span><br><span class="line">        locationM.startUpdatingLocation();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 开启重大位置变化监听</span></span><br><span class="line">        locationM.startMonitoringSignificantLocationChanges();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 定位逻辑:按照精确度从低到高进行定位,如果定位超时,返回已定位到的最高精确度的信息</span></span><br><span class="line">        <span class="comment">// 必须实现地理方法: "locationManager: didFailWithError:"</span></span><br><span class="line">        <span class="comment">// 不能与: "startUpdatingLocation"或"allowDeferredLocationUpdates"同时使用</span></span><br><span class="line">        <span class="keyword">if</span> #available(iOS <span class="number">9.0</span>, *) &#123;</span><br><span class="line">            locationM.requestLocation()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="通过代理获得相关信息"><a href="#通过代理获得相关信息" class="headerlink" title="通过代理获得相关信息"></a>通过代理获得相关信息</h5><blockquote><p><strong>CLLocation</strong> 常用相关属性: <code>coordinate</code>: 经纬度;&emsp; <code>altitude</code>: 海拔;&emsp; <code>horizontalAccuracy</code>: 水平精确度(负值: 获得的位置信息无效);&emsp; <code>verticalAccuracy</code>: 垂直精确度(负值: 获得的位置信息无效);&emsp; <code>course</code>: 航向;&emsp; <code>speed</code>: 速度。<br>方法: <code>func distance(from location: CLLocation) -&gt; CLLocationDistance:</code> 计算当前位置与指定位置的直线距离。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">extension MainViewContoller: CLLocationManagerDelegate &#123;</span><br><span class="line">    // 响应位置改变,获取当前用户位置信息</span><br><span class="line">    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) &#123; </span><br><span class="line">        // CLLocation对象</span><br><span class="line">        guard let location: CLLocation = locations.last else &#123; return &#125;</span><br><span class="line">        </span><br><span class="line">        // 获得当前航向</span><br><span class="line">        let courses = [&quot;北偏东&quot;, &quot;东偏南&quot;, &quot;南偏西&quot;, &quot;西偏北&quot;]</span><br><span class="line">        var course = courses[(Int(location.course) / 90)]</span><br><span class="line">        </span><br><span class="line">        // 获得偏移角度</span><br><span class="line">        let angle = Int(location.course) % 90</span><br><span class="line">        guard angle &gt; 0 else &#123; return &#125;</span><br><span class="line">        </span><br><span class="line">        // 判断是否为:正北,正南,正东,正西</span><br><span class="line">        if angle == 0 &#123;</span><br><span class="line">            course = &quot;正&quot; + String((course as NSString).substring(to: 1))</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        // 获得移动距离</span><br><span class="line">        guard previousLocation != nil else &#123;</span><br><span class="line">            previousLocation = location</span><br><span class="line">            return</span><br><span class="line">        &#125;</span><br><span class="line">        let distance = location.distance(from: previousLocation!)</span><br><span class="line">        previousLocation = location;</span><br><span class="line">        </span><br><span class="line">        // 打印相关信息</span><br><span class="line">        if angle == 0 &#123;</span><br><span class="line">            print(&quot;\(course) 移动了\(distance)米&quot;)</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            print(&quot;\(course) \(angle)度 移动了\(distance)米&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 获得当前用户的授权状态</span><br><span class="line">    func locationManager(_ manager: CLLocationManager, didChangeAuthorization status: CLAuthorizationStatus) &#123;</span><br><span class="line">        switch status &#123;</span><br><span class="line">        case .notDetermined: </span><br><span class="line">            print(&quot;用户未决定是否开启定位授权&quot;)</span><br><span class="line">        case .restricted:</span><br><span class="line">            print(&quot;定位服务受到限制&quot;)</span><br><span class="line">        case .denied: // 两种情况: 1.用户拒绝授权; 2.手机定位服务关闭</span><br><span class="line">            // 1.用户拒绝授权使用定位服务</span><br><span class="line">            if CLLocationManager.locationServicesEnabled() &#123; </span><br><span class="line">                // iOS 8.0 以后, 系统提供了快捷跳转到设置界面的方法</span><br><span class="line">                if #available(iOS 8.0, *) &#123;</span><br><span class="line">                    let settingUrl = URL(string: UIApplicationOpenSettingsURLString)</span><br><span class="line">                    if UIApplication.shared.canOpenURL(settingUrl!) &#123;</span><br><span class="line">                        UIApplication.shared.openURL(settingUrl!)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;else &#123; </span><br><span class="line">                // 2.手机定位服务关闭(系统会自动跳转到打开定位服务界面)</span><br><span class="line">                print(&quot;手机定位服务关闭&quot;)</span><br><span class="line">            &#125;</span><br><span class="line">        case .authorizedWhenInUse:</span><br><span class="line">            print(&quot;前台定位授权&quot;)</span><br><span class="line">        case .authorizedAlways:</span><br><span class="line">            print(&quot;前后台定位授权&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 定位失败</span><br><span class="line">    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) &#123;</span><br><span class="line">         print(&quot;定位失败&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方向监测"><a href="#方向监测" class="headerlink" title="方向监测"></a>方向监测</h4><h5 id="开启设备朝向更新检测"><a href="#开启设备朝向更新检测" class="headerlink" title="开启设备朝向更新检测"></a>开启设备朝向更新检测</h5><blockquote><p>设备朝向监测: 通过”磁力计”实现。<br><code>headingFilter</code>: 方向的改变值超过该属性值, 才激活代理方法<br><code>headingOrientation</code>: 设置设备朝向</p><p>案例: 指南针。</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> CoreLocation</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainViewController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 指南针视图</span></span><br><span class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> compassImageView: <span class="type">UIImageView</span>!</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">lazy</span> <span class="keyword">var</span> locationM: <span class="type">CLLocationManager</span> = &#123;</span><br><span class="line">        <span class="keyword">let</span> locationM = <span class="type">CLLocationManager</span>()</span><br><span class="line">        locationM.delegate = <span class="keyword">self</span></span><br><span class="line">        <span class="keyword">return</span> locationM</span><br><span class="line">    &#125;()</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 点击屏幕,开启朝向服务</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">touchesBegan</span><span class="params">(<span class="number">_</span> touches: Set&lt;UITouch&gt;, with event: UIEvent?)</span></span> &#123;</span><br><span class="line">        <span class="comment">// 判断磁力计是否可用</span></span><br><span class="line">        <span class="keyword">if</span> <span class="type">CLLocationManager</span>.headingAvailable() &#123;</span><br><span class="line">            <span class="comment">// 开始监听当前设备朝向</span></span><br><span class="line">            locationM.startUpdatingHeading()</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"无法识别当前设备磁力计"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="通过代理获得相关信息-1"><a href="#通过代理获得相关信息-1" class="headerlink" title="通过代理获得相关信息"></a>通过代理获得相关信息</h5><blockquote><p><strong>CLHeading</strong> 常用属性: <code>magneticHeading</code>: 设备与磁北的相对方向;&emsp; <code>trueHeading</code>: 设备与真北的相对方向;&emsp; <code>headingAccuracy</code>: 方向值的错误范围;&emsp; <code>timestamp</code>: 方向值的生成时间;&emsp; <code>x(y,z)</code>: 获取该设备在x(y,z)方向上监听得到的原始磁力值(单位:微特斯拉)。</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">MainViewController</span>: <span class="title">CLLocationManagerDelegate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">locationManager</span><span class="params">(<span class="number">_</span> manager: CLLocationManager, didUpdateHeading newHeading: CLHeading)</span></span> &#123;</span><br><span class="line">        <span class="comment">// 获得设备朝向</span></span><br><span class="line">        <span class="keyword">let</span> magnetic = newHeading.magneticHeading</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 角度转弧度</span></span><br><span class="line">        <span class="keyword">let</span> angle = <span class="type">CGFloat</span>(magnetic / <span class="number">180</span> * .pi)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 旋转(动画)</span></span><br><span class="line">        <span class="type">UIView</span>.animate(withDuration: <span class="number">1.0</span>) &#123;</span><br><span class="line">            <span class="keyword">self</span>.compassImageView.transform = <span class="type">CGAffineTransform</span>(rotationAngle: -angle)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="区域检测"><a href="#区域检测" class="headerlink" title="区域检测"></a>区域检测</h4><blockquote><p>iOS 8.0 及以后,需要主动请求用户授权</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> CoreLocation</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainViewController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 管理者对象</span></span><br><span class="line">    <span class="built_in">lazy</span> <span class="keyword">var</span> locationM: <span class="type">CLLocationManager</span> = &#123;</span><br><span class="line">        <span class="keyword">let</span> locationM = <span class="type">CLLocationManager</span>()</span><br><span class="line">        locationM.delegate = <span class="keyword">self</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 主动请求授权</span></span><br><span class="line">        <span class="keyword">if</span> #available(iOS <span class="number">8.0</span>, *) &#123;</span><br><span class="line">            locationM.requestWhenInUseAuthorization()</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> locationM</span><br><span class="line">    &#125;()</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 开启区域监听</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">touchesBegan</span><span class="params">(<span class="number">_</span> touches: Set&lt;UITouch&gt;, with event: UIEvent?)</span></span> &#123;</span><br><span class="line">        <span class="comment">// 确定监听区域可识别</span></span><br><span class="line">        <span class="keyword">if</span> <span class="type">CLLocationManager</span>.isMonitoringAvailable(<span class="keyword">for</span>: <span class="type">CLCircularRegion</span>.<span class="keyword">self</span>) &#123;</span><br><span class="line">            <span class="comment">// 设置监听区域</span></span><br><span class="line">            <span class="keyword">let</span> center = <span class="type">CLLocationCoordinate2D</span>(latitude: <span class="number">23.126</span>, longitude: <span class="number">113.395</span>)</span><br><span class="line">            <span class="keyword">var</span> radius: <span class="type">CLLocationDistance</span> = <span class="number">1000</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">distance</span> &gt;= locationM.maximumRegionMonitoringDistance &#123;</span><br><span class="line">                <span class="built_in">distance</span> = locationM.maximumRegionMonitoringDistance</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">let</span> identifier: <span class="type">String</span> = <span class="string">"区域标识"</span></span><br><span class="line">            <span class="keyword">let</span> circularRegion = <span class="type">CLCircularRegion</span>(center: center, radius: radius, identifier: identifier)</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 开始区域监听</span></span><br><span class="line">            locationM.startMonitoring(<span class="keyword">for</span>: circularRegion)</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 请求监听状态</span></span><br><span class="line">            locationM.requestState(<span class="keyword">for</span>: region)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="通过代理获得相关信息-2"><a href="#通过代理获得相关信息-2" class="headerlink" title="通过代理获得相关信息"></a>通过代理获得相关信息</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">MainViewController</span>: <span class="title">CLLocationManagerDelegate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">locationManager</span><span class="params">(<span class="number">_</span> manager: CLLocationManager, didStartMonitoringFor region: CLRegion)</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"开启区域监听"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">locationManager</span><span class="params">(<span class="number">_</span> manager: CLLocationManager, didEnterRegion region: CLRegion)</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"进入该区域"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">locationManager</span><span class="params">(<span class="number">_</span> manager: CLLocationManager, didExitRegion region: CLRegion)</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"离开该区域"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">locationManager</span><span class="params">(<span class="number">_</span> manager: CLLocationManager, didDetermineState state: CLRegionState, <span class="keyword">for</span> region: CLRegion)</span></span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> state &#123;</span><br><span class="line">        <span class="keyword">case</span> .inside:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"进入该区域"</span>)</span><br><span class="line">        <span class="keyword">case</span> .outside:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"离开该区域"</span>)</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"无法识别"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;&amp;emsp;CoreLocation 框架可用于定位设备当前的经纬度，通过该框架，应用程序可通过附近的蜂窝基站、WIFI信号或者GPS等信息计算用户位置。其中 CLLocationManager 是整个 CoreLocation 框架的核心，定位、方向检测、区域检测等都由该API完成。&lt;br&gt;
    
    </summary>
    
      <category term="iOS笔记" scheme="http://yoursite.com/categories/iOS%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="系统框架" scheme="http://yoursite.com/tags/%E7%B3%BB%E7%BB%9F%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>FMDB框架</title>
    <link href="http://yoursite.com/2017/12/10/FMDB%E6%A1%86%E6%9E%B6/"/>
    <id>http://yoursite.com/2017/12/10/FMDB框架/</id>
    <published>2017-12-09T19:33:37.000Z</published>
    <updated>2017-12-19T09:29:13.171Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;&emsp;SQLite 是一个轻量级的关系数据库。由于原生的 SQLite API 对用户并不是很友好。于是, 开源社区中出现了一系列对 SQLite API 封装的库，而 <a href="https://github.com/ccgus/fmdb" target="_blank" rel="noopener">FMDB</a> 是最好用的。<br><a id="more"></a></p><h4 id="FMDB组成"><a href="#FMDB组成" class="headerlink" title="FMDB组成"></a>FMDB组成</h4><blockquote><ol><li><code>FMDatabase</code>: 提供数据库的类，用于执行“数据库语句”</li><li><code>FMResultset</code>: 用于查询数据，除了删除都是查询</li><li><code>FMDatabaseQueue</code>: 用于多线程下查询和更新数据库，避免线程阻塞</li></ol></blockquote><h4 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h4><h5 id="导入资源文件-定义全局数据库对象"><a href="#导入资源文件-定义全局数据库对象" class="headerlink" title="导入资源文件,定义全局数据库对象"></a>导入资源文件,定义全局数据库对象</h5><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;FMDatabase.h&gt;</span></span></span><br><span class="line"><span class="keyword">static</span> FMDatabase* db = <span class="literal">nil</span>;</span><br></pre></td></tr></table></figure><h5 id="数据库的保存路径"><a href="#数据库的保存路径" class="headerlink" title="数据库的保存路径"></a>数据库的保存路径</h5><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">NSString</span> *)getSqlitePath &#123;</span><br><span class="line">    <span class="keyword">return</span> [[<span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSCachesDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>) firstObject] stringByAppendingPathComponent:<span class="string">@"DB.sqlite"</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h5><blockquote><p>数据库只需要创建下一次,当该文件不存在时, FMDB 会自动创建<br>如果你传入的路径是空串:<code>@&quot;&quot;</code>,FMDB会在临时文件目录下创建一个数据库,相当于:<code>[FMDatabase databaseWithPath:@&quot;/tmp/tmp.db&quot;]</code><br>如果你传入的路径是:<code>NULL</code>，它会建立一个在内存中的数据库</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db = [FMDatabase databaseWithPath:[<span class="keyword">self</span> getSqlitePath]];</span><br></pre></td></tr></table></figure><h5 id="打开-关闭数据库"><a href="#打开-关闭数据库" class="headerlink" title="打开/关闭数据库"></a>打开/关闭数据库</h5><blockquote><p>数据库需要打开才能进行操作,操作完成要关闭数据库</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(![db open]) &#123; <span class="comment">// 提示错误信息</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">[db close];</span><br></pre></td></tr></table></figure><h5 id="执行更新操作"><a href="#执行更新操作" class="headerlink" title="执行更新操作"></a>执行更新操作</h5><blockquote><p>除”查询”操作,”增删改销毁”都统称: <strong>更新操作</strong><br>如果使用占位符:<code>?</code>,只能给占位符传递对象,传递基本数据类型会报错</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>([db open]) &#123;</span><br><span class="line">    <span class="built_in">NSString</span> *sql_stmt = <span class="string">@"create table if not exists t_person (id integer primary key autoincrement, lastname text not null, firstname text not null);"</span>;</span><br><span class="line">    <span class="built_in">BOOL</span> success = [db executeUpdate: sql_stmt];</span><br><span class="line"></span><br><span class="line">    sql_stmt = <span class="string">@"insert into t_person(lastname, firstname) values(?, ?);"</span>;</span><br><span class="line">    success = [db executeUpdate: sql_stmt, person.lastname, person.firstname];</span><br><span class="line">&#125;</span><br><span class="line">[db close];</span><br></pre></td></tr></table></figure><h5 id="执行查询操作"><a href="#执行查询操作" class="headerlink" title="执行查询操作"></a>执行查询操作</h5><blockquote><p>即使操作结果只有1条,也必须执行:<code>[resultSet next]</code></p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>([db open]) &#123;</span><br><span class="line">    FMResultSet *resultSet = [db executeQuery:<span class="string">@"select * from t_people;"</span>];</span><br><span class="line">    <span class="keyword">while</span> ([resultSet next]) &#123; <span class="comment">// 根据"下标/列名"获得对应的数据</span></span><br><span class="line">        <span class="keyword">int</span> ID = [set intForColumnIndex:<span class="number">0</span>]; </span><br><span class="line">        <span class="built_in">NSString</span> *lastname = [set stringForColumn: <span class="string">@"lastname"</span>];</span><br><span class="line">        <span class="built_in">NSString</span> *firstname = [set stringForColumn: <span class="string">@"firstname"</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">[db close];</span><br></pre></td></tr></table></figure><h5 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h5><blockquote><p><code>FMDatabase</code>: 该类本身并不是线程安全的,不可在多线程中共用一个对象并且同时使用,不然会造成数据混乱等问题<br>如果我们的 app 需要多线程操作数据库，那么就需要使用<code>FMDatabaseQueue</code>来保证线程安全</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 只要创建数据库队列对象, FMDB内部就会自动给我们加载数据库对象(最好放在单例中实现)</span></span><br><span class="line">FMDatabaseQueue *queue = [FMDatabaseQueue databaseQueueWithPath:[<span class="keyword">self</span> getSqlitePath]];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行操作</span></span><br><span class="line">[queue inDatabase:^(FMDatabase *db) &#123;</span><br><span class="line">    <span class="built_in">NSString</span> *sql_stmt = <span class="string">@"create table if not exists t_student (id integer primary key autoincrement, name text not null, score real default 60.0);"</span>;</span><br><span class="line">    [db executeUpdate: sql_stmt];</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事务(大批量数据处理优化)</span></span><br><span class="line">[queue inTransaction:^(FMDatabase *db, <span class="built_in">BOOL</span> *rollback) &#123;</span><br><span class="line">     <span class="built_in">NSString</span> *sql_stmt = <span class="string">@"insert into t_student(name, score) values(?, ?);"</span>;</span><br><span class="line">    [db executeUpdate: sql_stmt, student.name, student.score];</span><br><span class="line">    </span><br><span class="line">    sql_stmt = <span class="string">@"UPDATE t_student set name = '贝克汉姆' where name = '张三';"</span>;</span><br><span class="line">    [db executeUpdate: sql_stmt];</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><h5 id="执行多条SQL语句"><a href="#执行多条SQL语句" class="headerlink" title="执行多条SQL语句"></a>执行多条SQL语句</h5><blockquote><p><code>block</code>返回值: 0,表示读取所有的数据(具体数值,返回具体列的数据,数值超出列的个数,默认返回第一列的数据)</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *sql_stmt = <span class="string">@"create table if not exists t_role(id integer primary key autoincrement, name text, age integer, sex text, score real);"</span></span><br><span class="line">                     <span class="string">"insert into t_role(name, age, sex, score) values('Jack', 27, '男', 89.0);"</span></span><br><span class="line">                     <span class="string">"insert into t_role(name, age, sex, score) values('包拯', 47, '男', 99.0);"</span></span><br><span class="line">                     <span class="string">"update t_role set name = '展昭' where name = 'Jack';"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正常状态</span></span><br><span class="line">[DB executeStatements: sql_stmt];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 存在查询语句,使用如下方法获得查询到的数据(字典中的值都是"NSString"对象)</span></span><br><span class="line">[db executeStatements:sql_stmt withResultBlock:^<span class="keyword">int</span>(<span class="built_in">NSDictionary</span> * _Nonnull resultsDictionary) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, resultsDictionary);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;]];</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;&amp;emsp;SQLite 是一个轻量级的关系数据库。由于原生的 SQLite API 对用户并不是很友好。于是, 开源社区中出现了一系列对 SQLite API 封装的库，而 &lt;a href=&quot;https://github.com/ccgus/fmdb&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;FMDB&lt;/a&gt; 是最好用的。&lt;br&gt;
    
    </summary>
    
      <category term="iOS笔记" scheme="http://yoursite.com/categories/iOS%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="第三方框架" scheme="http://yoursite.com/tags/%E7%AC%AC%E4%B8%89%E6%96%B9%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>SQLites数据库</title>
    <link href="http://yoursite.com/2017/12/07/SQLite%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://yoursite.com/2017/12/07/SQLite数据库/</id>
    <published>2017-12-06T19:33:37.000Z</published>
    <updated>2017-12-11T17:25:35.653Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;&emsp;SQLite，是一款轻型的数据库，是遵守ACID的关系型数据库管理系统，它包含在一个相对小的C库中。它的设计目标是<strong>嵌入式</strong>的，<strong>占用资源非常的低</strong>，可能只需要几百K的内存就够了。它能够支持Windows/Linux/Unix等等主流的操作系统，同时能够跟很多程序语言相结合，比如 Tcl、C#、PHP、Java等，还有ODBC接口，同样比起Mysql、PostgreSQL这两款开源的世界著名数据库管理系统来讲，它的处理速度比他们都快。<br><a id="more"></a></p><h4 id="SQLite的具体实现"><a href="#SQLite的具体实现" class="headerlink" title="SQLite的具体实现"></a>SQLite的具体实现</h4><h5 id="导入资源文件-定义全局数据库对象"><a href="#导入资源文件-定义全局数据库对象" class="headerlink" title="导入资源文件,定义全局数据库对象"></a>导入资源文件,定义全局数据库对象</h5><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;sqlite3.h&gt;</span></span></span><br><span class="line"><span class="keyword">static</span> sqlite3 *DB = <span class="literal">nil</span>;</span><br></pre></td></tr></table></figure><h5 id="获得数据库的保存路径"><a href="#获得数据库的保存路径" class="headerlink" title="获得数据库的保存路径"></a>获得数据库的保存路径</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- (NSString *)getSqlitePath &#123;</span><br><span class="line">    return [[NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES) firstObject] stringByAppendingPathComponent:@&quot;DB.sqlite&quot;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="数据库的打开与关闭"><a href="#数据库的打开与关闭" class="headerlink" title="数据库的打开与关闭"></a>数据库的打开与关闭</h5><blockquote><p>打开数据库,如果数据库不存在,会自动创建数据库<br>数据库的每次操作(如:插入,删除,更新等)完成时,都必须关闭数据库</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)openSqlite &#123;</span><br><span class="line">    <span class="keyword">char</span> <span class="keyword">const</span> *sqlitePath = [[<span class="keyword">self</span> getSqlitePath] UTF8String];</span><br><span class="line">    <span class="keyword">return</span> (sqlite3_open(sqlitePath, &amp;DB) == SQLITE_OK);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)closeSqlite &#123;</span><br><span class="line">    sqlite3_close(DB);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="执行数据库语句"><a href="#执行数据库语句" class="headerlink" title="执行数据库语句"></a>执行数据库语句</h5><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)execSql:(<span class="built_in">NSString</span> *)sql &#123;</span><br><span class="line">    <span class="keyword">char</span> <span class="keyword">const</span> *sql_stmt = sql.UTF8String;</span><br><span class="line">    <span class="keyword">return</span> sqlite3_exec(DB, sql_stmt, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>) == SQLITE_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="数据记录表格的创建与删除"><a href="#数据记录表格的创建与删除" class="headerlink" title="数据记录表格的创建与删除"></a>数据记录表格的创建与删除</h5><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)createTable &#123;</span><br><span class="line">    <span class="built_in">NSString</span> *sql_stmt = <span class="string">@"create table if not exists t_stu(id integer primary key autoincrement, name text, age integer, sex text, score real)"</span>;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> execSql:sql_stmt];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)dropTable&#123;</span><br><span class="line">    <span class="built_in">NSString</span> *sql_stmt = <span class="string">@"drop table if exists t_stu"</span>;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> execSql:sql_stmt];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="事务的开启与提交"><a href="#事务的开启与提交" class="headerlink" title="事务的开启与提交"></a>事务的开启与提交</h5><blockquote><ol><li>如果使用<code>sqlite_exec</code>或<code>sqlite_step()</code>执行数据库语句时,系统将自动对事务进行操作(开启/提交)</li><li>事务的开启与提交会消耗大量的时间,如果进行大批量数据操作,系统会多次开启/提交事务,大大影响程序的执行效率</li><li>优化方案: 在开始处理数据时,手动开启”事务”,数据处理完成后,手动关闭”事务”,系统将不会自动开启/提交事务</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- (BOOL)beginTransaction &#123;</span><br><span class="line">    NSString *sql_stmt = @&quot;begin transaction&quot;;</span><br><span class="line">    return [sqliteTool execSql:sql_stmt];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (BOOL)commitTransaction &#123;</span><br><span class="line">    NSString *sql_stmt = @&quot;commit transaction&quot;;</span><br><span class="line">    return [sqliteTool execSql:sql_stmt];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="存储数据-gt-数据表"><a href="#存储数据-gt-数据表" class="headerlink" title="存储数据-&gt;数据表"></a>存储数据-&gt;数据表</h5><blockquote><p>方法一: 正常数据存储</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)insertDataInTableOfSqlite:(StudentModel *)stuModel &#123;</span><br><span class="line">    <span class="built_in">NSString</span> *sql_stmt = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"insert into t_stu(name, age, sex, score) values ('%@', %ld, '%@', %.1f)"</span>, stuModel.name, stuModel.age, stuModel.sex, stuModel.score];</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> execSql:sql_stmt];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>方法二: 大批量数据存储</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)insertDataInTableOfSqlite &#123;</span><br><span class="line">    <span class="comment">// ?: 表示预留值</span></span><br><span class="line">    <span class="keyword">char</span> <span class="keyword">const</span> *sql_stmt = [<span class="string">@"insert into t_stu(name, age, sex, score) values (?, ?, ?, ?)"</span> UTF8String];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据"sql_stmt",生成"准备语句"</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 参数1: 数据库对象</span></span><br><span class="line"><span class="comment">     * 参数2: 数据库执行语句</span></span><br><span class="line"><span class="comment">     * 参数3: 提取的字符串长度 (-1: 自动计算)</span></span><br><span class="line"><span class="comment">     * 参数4: 预处理语句(准备语句)</span></span><br><span class="line"><span class="comment">     * 参数5: 根据"参数3"提取的长度后,剩余的字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    sqlite3_stmt *sqlite_stmt;</span><br><span class="line">    <span class="keyword">if</span> (sqlite3_prepare_v2(DB, sql_stmt, <span class="number">-1</span>, &amp;sqlite_stmt, <span class="literal">NULL</span>) != SQLITE_OK) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 开启事务</span></span><br><span class="line">    [<span class="keyword">self</span> beginTransaction];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 插入数据(数据的个数: 10000)</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSInteger</span> index = <span class="number">0</span>; index &lt; <span class="keyword">self</span>.stuModels.count; index ++) &#123;</span><br><span class="line">        <span class="comment">// 获得学生数据</span></span><br><span class="line">        StudentModel *stuModel = <span class="keyword">self</span>.stuModels[index];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 参数绑定(偷懒: runtime???)</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 参数1: 准备语句</span></span><br><span class="line"><span class="comment">         * 参数2: 数据表中的列参数索引</span></span><br><span class="line"><span class="comment">         * 参数3: 绑定的值</span></span><br><span class="line"><span class="comment">         * 参数4: 值提取的长度(-1: 自动计算)</span></span><br><span class="line"><span class="comment">         * 参数5: 值的处理方式</span></span><br><span class="line"><span class="comment">         SQLITE_STATIC: 认为参数是常量,不会被释放(不做任何引用)</span></span><br><span class="line"><span class="comment">         SQLITE_TRANSIENT: 对参数进行引用</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        sqlite3_bind_text(sqlite_stmt, <span class="number">1</span>, stuModel.score, <span class="number">-1</span>, SQLITE_TRANSIENT);</span><br><span class="line">        sqlite3_bind_int(sqlite_stmt, <span class="number">2</span>, stuModel.age);</span><br><span class="line">        sqlite3_bind_text(sqlite_stmt, <span class="number">3</span>, stuModel.sex, <span class="number">-1</span>, SQLITE_TRANSIENT);</span><br><span class="line">        sqlite3_bind_double(sqlite_stmt, <span class="number">4</span>, stuModel.score);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 执行准备语句</span></span><br><span class="line">        <span class="keyword">if</span>(sqlite3_step(sqlite_stmt) == SQLITE_DONE) <span class="built_in">NSLog</span>(<span class="string">@"执行成功"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 重置语句(不管"成功/失败"都要执行)</span></span><br><span class="line">        sqlite3_reset(sqlite_stmt);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 提交事务</span></span><br><span class="line">    [<span class="keyword">self</span> commitTransaction];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 释放准备语句</span></span><br><span class="line">    sqlite3_finalize(sqlite_stmt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="查询-获取-数据-gt-数据表"><a href="#查询-获取-数据-gt-数据表" class="headerlink" title="查询(获取)数据-&gt;数据表"></a>查询(获取)数据-&gt;数据表</h5><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">NSArray</span> *)selectDataInTableOfSqlite &#123;</span><br><span class="line">    <span class="keyword">char</span> <span class="keyword">const</span> *sql_stmt = [<span class="string">@"select * from t_stu"</span> UTF8String];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获得准备语句</span></span><br><span class="line">    sqlite3_stmt *sqlite_stmt;</span><br><span class="line">    <span class="keyword">if</span>(sqlite3_prepare_v2(DB, sql_stmt, <span class="number">-1</span>, &amp;sqlite_stmt, <span class="literal">NULL</span>) != SQLITE_OK) <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 保存搜索查询到的数据</span></span><br><span class="line">    <span class="built_in">NSMutableArray</span> *stuModels = [<span class="built_in">NSMutableArray</span> array];     </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 开启事务</span></span><br><span class="line">    [<span class="keyword">self</span>.sqliteTool beginTransaction];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(sqlite3_step(sqlite_stmt) == SQLITE_ROW) &#123;</span><br><span class="line">        StudentModel *stuModel = [[StudentModel alloc] init];</span><br><span class="line">                </span><br><span class="line">        <span class="comment">// 获得数据表中列的个数</span></span><br><span class="line">        <span class="keyword">int</span> count = sqlite3_column_count(sql_stmt);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; count; index ++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(index == <span class="number">0</span>) <span class="keyword">continue</span>; <span class="comment">// 数据表的唯一标识</span></span><br><span class="line">        </span><br><span class="line">            <span class="comment">// 获得列的名称</span></span><br><span class="line">            <span class="built_in">NSString</span> *key = [<span class="built_in">NSString</span> stringWithUTF8String:sqlite3_column_name(sql_stmt, index)];</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 获得列的类型</span></span><br><span class="line">            <span class="keyword">int</span> type = sqlite3_column_type(sql_stmt, index);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 根据类型执行对应的方法</span></span><br><span class="line">            <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">                <span class="keyword">case</span> SQLITE_INTEGER: &#123;</span><br><span class="line">                    <span class="keyword">int</span> value = sqlite3_column_int(sql_stmt, index);</span><br><span class="line">                    [stuModel setValue:@(value) forKey:key]; <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> SQLITE_FLOAT: &#123;</span><br><span class="line">                    <span class="keyword">double</span> value = sqlite3_column_double(sql_stmt, index);</span><br><span class="line">                    [stuModel setValue:@(value) forKey:key]; <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> SQLITE_TEXT: &#123;</span><br><span class="line">                    <span class="built_in">NSString</span> *value = [<span class="built_in">NSString</span> stringWithUTF8String:(<span class="keyword">char</span> <span class="keyword">const</span> *)sqlite3_column_text(sql_stmt, index)];</span><br><span class="line">                    [stuModel setValue:value forKey:key]; <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        [stuModels addObject:stuModel];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 提交事务</span></span><br><span class="line">    [<span class="keyword">self</span> commitTransaction];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 释放准备语句</span></span><br><span class="line">    sqlite3_finalize(sql_stmt);</span><br><span class="line">    <span class="keyword">return</span> [stuModels <span class="keyword">copy</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;&amp;emsp;SQLite，是一款轻型的数据库，是遵守ACID的关系型数据库管理系统，它包含在一个相对小的C库中。它的设计目标是&lt;strong&gt;嵌入式&lt;/strong&gt;的，&lt;strong&gt;占用资源非常的低&lt;/strong&gt;，可能只需要几百K的内存就够了。它能够支持Windows/Linux/Unix等等主流的操作系统，同时能够跟很多程序语言相结合，比如 Tcl、C#、PHP、Java等，还有ODBC接口，同样比起Mysql、PostgreSQL这两款开源的世界著名数据库管理系统来讲，它的处理速度比他们都快。&lt;br&gt;
    
    </summary>
    
      <category term="iOS笔记" scheme="http://yoursite.com/categories/iOS%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
</feed>
