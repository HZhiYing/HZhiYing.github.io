<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F12%2F06%2Fhello-world%2F</url>
    <content type="text"><![CDATA[const myTheme = { render(state, instance) { const container = document.createElement('div') container.lang = "en-US" container.className = 'gitment-container gitment-root-container' container.appendChild(instance.renderHeader(state, instance)) container.appendChild(instance.renderEditor(state, instance)) container.appendChild(instance.renderComments(state, instance)) container.appendChild(instance.renderFooter(state, instance)) return container }, } var gitment = new Gitment({ theme: myTheme, owner: 'HZhiYing', repo: 'HZhiYing.github.io', oauth: { client_id: 'bbae55d52d3c4fe54f8e', client_secret: '520b29e6a2e0610713d9252a3b739f10743f89ab Revoke all user tokens', }, }) gitment.render('container') Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
  <entry>
    <title><![CDATA[测试文件]]></title>
    <url>%2F2017%2F12%2F06%2F%E6%B5%8B%E8%AF%95%E6%96%87%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[var gitment = new Gitment({ owner: 'HZhiYing', repo: 'HZhiYing.github.io', oauth: { client_id: 'bbae55d52d3c4fe54f8e', client_secret: '520b29e6a2e0610713d9252a3b739f10743f89ab Revoke all user tokens', }, }) gitment.render('container') 测试显示文本的部分内容 测试显示文本的部分内容 测试显示文本的部分内容 测试显示文本的部分内容 测试显示文本的部分内容 测试显示文本的部分内容 测试显示文本的部分内容 测试显示文本的部分内容 测试显示文本的部分内容 测试显示文本的部分内容 测试显示文本的部分内容 测试显示文本的部分内容 测试显示文本的部分内容 测试显示文本的部分内容测试显示文本的部分内容 测试显示文本的部分内容 测试显示文本的部分内容 测试显示文本的部分内容 测试显示文本的部分内容 测试显示文本的部分内容 测试显示文本的部分内容 #####NSObject.h文件123456#import &lt;Foundation/Foundation.h&gt;@interface ZYContact : NSObject &lt;NSSecureCoding&gt;@property(nonatomic, copy) NSString *name; // 联系人@property(nonatomic, copy) NSString *phone; // 联系电话@end #####NSObject.h文件12345678910111213141516171819202122#import "ZYContact.h"@implementation ZYContact+ (BOOL)supportsSecureCoding &#123; return YES;&#125;- (instancetype)initWithCoder:(NSCoder *)coder&#123; if(self == [super init]) &#123; self.name = [coder decodeObjectForKey:@"name"]; self.phone = [coder decodeObjectForKey:@"phone"]; &#125; return self;&#125;- (void)encodeWithCoder:(NSCoder *)aCoder &#123; [aCoder encodeObject:self.name forKey:@"name"]; [aCoder encodeObject:self.phone forKey:@"phone"];&#125;@end 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114#import "ZYAddressBookViewController.h"#import "ZYAddContactViewController.h"#import "ZYAlterContactViewController.h"#import "ZYContact.h"#define contactsFilePath [[NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES) lastObject] stringByAppendingPathComponent:@"contacts.data"]@interface ZYAddressBookViewController ()@property(nonatomic,strong) NSMutableArray *contactArrM;- (IBAction)deregistrationAction:(id)sender; // 注销- (IBAction)addContactAction:(id)sender; // 添加联系人@end@implementation ZYAddressBookViewController- (NSMutableArray *)contactArrM &#123; if(_contactArrM == nil) &#123; _contactArrM = [NSKeyedUnarchiver unarchiveObjectWithFile:contactsFilePath]; // 开始加载数据 if(_contactArrM == nil) _contactArrM = [NSMutableArray array]; &#125; return _contactArrM;&#125;- (void)viewDidLoad &#123; [super viewDidLoad]; self.tableView.tableFooterView = [[UIView alloc] init];&#125;// 注销操作- (IBAction)deregistrationAction:(id)sender &#123; UIAlertController *alter = [UIAlertController alertControllerWithTitle:@"警告" message:@"确定注销当前用户?" preferredStyle:UIAlertControllerStyleActionSheet]; UIAlertAction *destructiveAction = [UIAlertAction actionWithTitle:@"注销" style:UIAlertActionStyleDestructive handler:^(UIAlertAction * _Nonnull action) &#123; // 保存数据 [NSKeyedArchiver archiveRootObject:self.contactArrM toFile:contactsFilePath]; // 跳转页面 [self.navigationController popViewControllerAnimated:YES]; &#125;]; [alter addAction:destructiveAction]; UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@"取消" style:UIAlertActionStyleCancel handler:nil]; [alter addAction:cancelAction]; [self presentViewController:alter animated:YES completion:nil];&#125;// 添加联系人- (IBAction)addContactAction:(id)sender &#123; [self performSegueWithIdentifier:@"AddressBookToAddContact" sender:nil];&#125;// 传值操作- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(nullable id)sender &#123; if([segue.destinationViewController isKindOfClass:[ZYAddContactViewController class]]) &#123; ZYAddContactViewController *addContactVc = segue.destinationViewController; addContactVc.getContactBlock = ^(ZYContact *contact) &#123; // 获得数据,刷新表格 [self.contactArrM addObject:contact]; [self.tableView reloadData]; // 保存数据 [NSKeyedArchiver archiveRootObject:self.contactArrM toFile:contactsFilePath]; &#125;; &#125;else &#123; ZYAlterContactViewController *alterContactVc = segue.destinationViewController; NSIndexPath *indexPath = self.tableView.indexPathForSelectedRow; alterContactVc.contact = self.contactArrM[indexPath.row]; alterContactVc.getAlterContactBlock = ^(ZYContact *contact) &#123; // 获得数据,刷新表格 [self.contactArrM replaceObjectAtIndex:indexPath.row withObject:contact]; [self.tableView reloadRowsAtIndexPaths:@[indexPath] withRowAnimation:UITableViewRowAnimationFade]; // 保存数据 [NSKeyedArchiver archiveRootObject:self.contactArrM toFile:contactsFilePath]; &#125;; &#125; // 设置返回按钮 self.navigationItem.backBarButtonItem = [[UIBarButtonItem alloc] initWithTitle:@"返回" style:UIBarButtonItemStylePlain target:nil action:nil];&#125;#pragma mark - Table view data source- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section &#123; return self.contactArrM.count;&#125;- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath &#123; static NSString *identifier = @"Identifier"; UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:identifier]; if(cell == nil) &#123; cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleValue1 reuseIdentifier:identifier]; cell.accessoryType = UITableViewCellAccessoryDisclosureIndicator; cell.selectionStyle = UITableViewCellSelectionStyleNone; cell.separatorInset = UIEdgeInsetsMake(0, 5, 0, 5); &#125; // 获取获取数据 ZYContact *contact = self.contactArrM[indexPath.row]; cell.textLabel.text = contact.name; cell.detailTextLabel.text = contact.phone; return cell;&#125;- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath &#123; [self performSegueWithIdentifier:@"AddressBookToAlterContact" sender:nil];&#125;// 右滑删除功能- (void)tableView:(UITableView *)tableView commitEditingStyle:(UITableViewCellEditingStyle)editingStyle forRowAtIndexPath:(NSIndexPath *)indexPath &#123; if (editingStyle == UITableViewCellEditingStyleDelete) &#123; [self.contactArrM removeObjectAtIndex:indexPath.row]; [tableView deleteRowsAtIndexPaths:@[indexPath] withRowAnimation:UITableViewRowAnimationTop]; &#125; // 保存数据 [NSKeyedArchiver archiveRootObject:self.contactArrM toFile:contactsFilePath];&#125;@end]]></content>
      <categories>
        <category>测试分类</category>
      </categories>
      <tags>
        <tag>测试标签</tag>
      </tags>
  </entry>
</search>
