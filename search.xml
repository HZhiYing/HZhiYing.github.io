<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[SQLites数据库]]></title>
    <url>%2F2017%2F12%2F07%2FSQLite%E6%95%B0%E6%8D%AE%E5%BA%93%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;&emsp;SQLite，是一款轻型的数据库，是遵守ACID的关系型数据库管理系统，它包含在一个相对小的C库中。它的设计目标是嵌入式的，占用资源非常的低，可能只需要几百K的内存就够了。它能够支持Windows/Linux/Unix等等主流的操作系统，同时能够跟很多程序语言相结合，比如 Tcl、C#、PHP、Java等，还有ODBC接口，同样比起Mysql、PostgreSQL这两款开源的世界著名数据库管理系统来讲，它的处理速度比他们都快。 SQLite的具体实现导入资源文件,定义全局数据库对象12#import &lt;sqlite3.h&gt;static sqlite3 *DB = nil; 获得数据库的保存路径123- (NSString *)getSqlitePath &#123; return [[NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES) firstObject] stringByAppendingPathComponent:@&quot;DB.sqlite&quot;];&#125; 打开数据库 打开数据库,如果数据库不存在,会自动创建数据库 1234- (BOOL)openSqlite &#123; char const *sqlitePath = [[self getSqlitePath] UTF8String]; return (sqlite3_open(sqlitePath, &amp;DB) == SQLITE_OK);&#125; 关闭数据库 数据库的每次操作(如:插入,删除,更新等)完成时,都必须关闭数据库 123- (void)closeSqlite &#123; sqlite3_close(DB);&#125; 执行数据库语句1234- (BOOL)execSql:(NSString *)sql &#123; char const *sql_stmt = sql.UTF8String; return sqlite3_exec(DB, sql_stmt, NULL, NULL, NULL) == SQLITE_OK;&#125; 数据记录表格的创建与删除123456789- (BOOL)createTable &#123; NSString *sql_stmt = @"create table if not exists t_stu(id integer primary key autoincrement, name text, age integer, sex text, score real)"; return [self execSql:sql_stmt];&#125;- (BOOL)dropTable&#123; NSString *sql_stmt = @"drop table if exists t_stu"; return [self execSql:sql_stmt];&#125; 事务的开启与提交 如果使用sqlite_exec或sqlite_step()执行数据库语句时,系统会自动对事务进行操作(开启/提交) 事务的开启与提交会消耗大量的时间,如果进行大批量数据操作,系统会多次开启/提交事务,大大影响程序的执行效率 优化方案: 在开始处理数据时,手动开启”事务”,数据处理完成后,手动关闭”事务”,系统将不会自动开启/提交事物 123456789- (BOOL)beginTransaction &#123; NSString *sql_stmt = @&quot;begin transaction&quot;; return [sqliteTool execSql:sql_stmt];&#125;- (BOOL)commitTransaction &#123; NSString *sql_stmt = @&quot;commit transaction&quot;; return [sqliteTool execSql:sql_stmt];&#125; 存储数据-&gt;表格 方法一: 正常数据存储 1234- (BOOL)insertDataInTableOfSqlite:(StudentModel *)stuModel &#123; NSString *sql_stmt = [NSString stringWithFormat:@"insert into t_stu(name, age, sex, score) values ('%@', %ld, '%@', %.1f)", stuModel.name, stuModel.age, stuModel.sex, stuModel.score]; return [self execSql:sql_stmt];&#125; 方法二: 大批量数据存储 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253- (void)insertDataInTableOfSqlite &#123; // ?: 表示预留值 char const *sql_stmt = [@"insert into t_stu(name, age, sex, score) values (?, ?, ?, ?)" UTF8String]; /** * 根据"sql_stmt",生成"准备语句" * * 参数1: 数据库对象 * 参数2: 数据库执行语句 * 参数3: 提取的字符串长度 (-1: 自动计算) * 参数4: 预处理语句(准备语句) * 参数5: 根据"参数3"提取的长度后,剩余的字符串 */ sqlite3_stmt *sqlite_stmt; if (sqlite3_prepare_v2(DB, sql_stmt, -1, &amp;sqlite_stmt, NULL) != SQLITE_OK) return; // 开启事务 [self beginTransaction]; // 插入数据(数据的个数: 10000) for (NSInteger index = 0; index &lt; self.stuModels.count; index ++) &#123; // 获得学生数据 StudentModel *stuModel = self.stuModels[index]; /** * 参数绑定(偷懒: runtime???) * * 参数1: 准备语句 * 参数2: 数据表中的列参数索引 * 参数3: 绑定的值 * 参数4: 值提取的长度(-1: 自动计算) * 参数5: 值的处理方式 SQLITE_STATIC: 认为参数是常量,不会被释放(不做任何引用) SQLITE_TRANSIENT: 对参数进行引用 */ sqlite3_bind_text(sqlite_stmt, 1, stuModel.score, -1, SQLITE_TRANSIENT); sqlite3_bind_int(sqlite_stmt, 2, stuModel.age); sqlite3_bind_text(sqlite_stmt, 3, stuModel.sex, -1, SQLITE_TRANSIENT); sqlite3_bind_double(sqlite_stmt, 4, stuModel.score); // 执行准备语句 if(sqlite3_step(sqlite_stmt) == SQLITE_DONE) NSLog(@"执行成功"); // 重置语句(不管"成功/失败"都要执行) sqlite3_reset(sqlite_stmt); &#125; // 提交事务 [self commitTransaction]; // 释放准备语句 sqlite3_finalize(sqlite_stmt);&#125; 查询(获取)数据1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556- (NSArray *)selectDataInTableOfSqlite &#123; char const *sql_stmt = [@"select * from t_stu" UTF8String]; // 获得准备语句 sqlite3_stmt *sqlite_stmt; if(sqlite3_prepare_v2(studentDB, sql_stmt, -1, &amp;sqlite_stmt, NULL) != SQLITE_OK) return nil; // 保存搜索查询到的数据 NSMutableArray *stuModels = [NSMutableArray array]; // 开启事务 [self.sqliteTool beginTransaction]; while(sqlite3_step(sqlite_stmt) == SQLITE_ROW) &#123; StudentModel *stuModel = [[StudentModel alloc] init]; // 获得数据表中列的个数 int count = sqlite3_column_count(sql_stmt); for (int index = 0; index &lt; count; index ++) &#123; if(index == 0) continue; // 数据表的唯一标识 // 获得列的名称 NSString *key = [NSString stringWithUTF8String:sqlite3_column_name(sql_stmt, index)]; // 获得列的类型 int type = sqlite3_column_type(sql_stmt, index); // 根据类型执行对应的方法 switch (type) &#123; case SQLITE_INTEGER: &#123; int value = sqlite3_column_int(sql_stmt, index); [stuModel setValue:@(value) forKey:key]; break; &#125; case SQLITE_FLOAT: &#123; double value = sqlite3_column_double(sql_stmt, index); [stuModel setValue:@(value) forKey:key]; break; &#125; case SQLITE_TEXT: &#123; NSString *value = [NSString stringWithUTF8String:(char const *)sqlite3_column_text(sql_stmt, index)]; [stuModel setValue:value forKey:key]; break; &#125; default: break; &#125; &#125; [stuModels addObject:stuModel]; &#125; // 提交事务 [self commitTransaction]; // 释放准备语句 sqlite3_finalize(sql_stmt); return [stuModels copy];&#125;]]></content>
      <categories>
        <category>iOS笔记</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
</search>
