<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[CoreLocation框架]]></title>
    <url>%2F2017%2F12%2F19%2FCoreLocation%E6%A1%86%E6%9E%B6%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;&emsp;CoreLocation 框架可用于定位设备当前的经纬度，通过该框架，应用程序可通过附近的蜂窝基站、WIFI信号或者GPS等信息计算用户位置。其中 CLLocationManager 是整个 CoreLocation 框架的核心，定位、方向检测、区域检测等都由该API完成。 定位服务 标准定位: GPS/WIFI/蓝牙/基站 (具体使用哪个定位,由苹果内部自行决定) 蓝牙: 如果当前设备无法完成定位服务,可以通过蓝牙连接”A设备”, 使用”A设备”进行定位, 当然定位获得的是”A设备”所在位置信息。 基站定位(必须有电话卡): 手机处于基站覆盖范围内, 定位到的位置是基站所在的位置,不是手机所在的位置。 WIFI 定位: 通过无线卡搜集周围所有的 WIFI 热点, 获得其 MAC 地址,然后通过 Apple 云端服务器查询该 WiFi 热点是否已经登记，如果已经登记，即可获取该WiFi热点的位置，最后通过对多个WiFi热点折中计算得到当前位置并返给iOS设备。 开启定位服务案例要求: 打印获得的定位信息( 格式: “北偏东” 30度, 移动了8米 ) 精确度: 定位精确准度越高, 越耗电, 定位所需时间越长, 尽量在满足要求的情况下, 使用低精确度。 kCLLocationAccuracyBestForNavigation -&gt; 最适合的定位 kCLLocationAccuracyBest -&gt; 10米误差 kCLLocationAccuracyNearestTenMeters -&gt; 100米误差 kCLLocationAccuracyKilometer -&gt; 1000米误差 kCLLocationAccuracyThreeKilometers -&gt; 3000米误差 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253import CoreLocationclass MainViewController: UIViewController &#123; // 管理者对象(iOS8.0 以后,如要使用定位服务,必须主动请求用户授权) lazy var locationM: CLLocationManager = &#123; let locationM = CLLocationManager() locationM.delegate = self // iOS8.0 及以后版本,需要主动请求用户授权 if #available(iOS 8.0, *) &#123; // 请求开启"前台定位授权",退到后台,定位服务可用,"有蓝条" // info.plist 必须存在: "NSLocationWhenInUseUsageDescription" locationM.requestWhenInUseAuthorization() // 请求开启"前后台定位授权",退到后台定位服务可用,"无蓝条"(优先级比前台定位授权高) // "info.plist" 中必须存在: "NSLocationAlwaysAndWhenInUseUsageDescription" 和 "NSLocationWhenInUseUsageDescription" locationM.requestAlwaysAuthorization() // iOS9.0 及以上版本, 如要实现后台定位, "info.plist" 文件中必须存在: "UIBackgroundModes" // 并且,将 "allowsBackgroundLocationUpdates" 属性设置为 "true" if #available(iOS 9.0, *) &#123; locationM.allowsBackgroundLocationUpdates = true &#125; &#125; // 设置定位执行条件(距离100.0米) locationM.distanceFilter = 100.0 // 设置定位精确度 locationM.desiredAccuracy = kCLLocationAccuracyBestForNavigation; return locationM; &#125;() // 记录上一次位置信息 var previousLocation: CLLocation? // 点击屏幕,开始定位 override func touchesBegan(_ touches: Set&lt;UITouch&gt;, with event: UIEvent?) &#123; // 开启定位服务(推荐) locationM.startUpdatingLocation(); // 开启重大位置变化监听 locationM.startMonitoringSignificantLocationChanges(); // 定位逻辑:按照精确度从低到高进行定位,如果定位超时,返回已定位到的最高精确度的信息 // 必须实现地理方法: "locationManager: didFailWithError:" // 不能与: "startUpdatingLocation"或"allowDeferredLocationUpdates"同时使用 if #available(iOS 9.0, *) &#123; locationM.requestLocation() &#125; &#125;&#125; 通过代理获得相关信息 CLLocation 常用相关属性: coordinate: 经纬度; altitude: 海拔; horizontalAccuracy: 水平精确度(负值: 获得的位置信息无效); verticalAccuracy: 垂直精确度(负值: 获得的位置信息无效); course: 航向; speed: 速度。方法: func distance(from location: CLLocation) -&gt; CLLocationDistance: 计算当前位置与指定位置的直线距离。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768extension MainViewContoller: CLLocationManagerDelegate &#123; // 响应位置改变,获取当前用户位置信息 func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) &#123; // CLLocation对象 guard let location: CLLocation = locations.last else &#123; return &#125; // 获得当前航向 let courses = ["北偏东", "东偏南", "南偏西", "西偏北"] var course = courses[(Int(location.course) / 90)] // 获得偏移角度 let angle = Int(location.course) % 90 guard angle &gt; 0 else &#123; return &#125; // 判断是否为:正北,正南,正东,正西 if angle == 0 &#123; course = "正" + String((course as NSString).substring(to: 1)) &#125; // 获得移动距离 guard previousLocation != nil else &#123; previousLocation = location return &#125; let distance = location.distance(from: previousLocation!) previousLocation = location; // 打印相关信息 if angle == 0 &#123; print("\(course) 移动了\(distance)米") &#125;else &#123; print("\(course) \(angle)度 移动了\(distance)米") &#125; &#125; // 获得当前用户的授权状态 func locationManager(_ manager: CLLocationManager, didChangeAuthorization status: CLAuthorizationStatus) &#123; switch status &#123; case .notDetermined: print("用户未决定是否开启定位授权") case .restricted: print("定位服务受到限制") case .denied: // 两种情况: 1.用户拒绝授权; 2.手机定位服务关闭 // 1.用户拒绝授权使用定位服务 if CLLocationManager.locationServicesEnabled() &#123; // iOS 8.0 以后, 系统提供了快捷跳转到设置界面的方法 if #available(iOS 8.0, *) &#123; let settingUrl = URL(string: UIApplicationOpenSettingsURLString) if UIApplication.shared.canOpenURL(settingUrl!) &#123; UIApplication.shared.openURL(settingUrl!) &#125; &#125; &#125;else &#123; // 2.手机定位服务关闭(系统会自动跳转到打开定位服务界面) print("手机定位服务关闭") &#125; case .authorizedWhenInUse: print("前台定位授权") case .authorizedAlways: print("前后台定位授权") &#125; &#125; // 定位失败 func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) &#123; print("定位失败") &#125;&#125; 方向监测开启设备朝向更新检测案例: 指南针 设备朝向监测: 通过”磁力计”实现。headingFilter: 方向的改变值超过该属性值, 才激活代理方法headingOrientation: 设置设备朝向 1234567891011121314151617181920212223import CoreLocationclass MainViewController: UIViewController &#123; // 指南针视图 @IBOutlet weak var compassImageView: UIImageView! lazy var locationM: CLLocationManager = &#123; let locationM = CLLocationManager() locationM.delegate = self return locationM &#125;() // 点击屏幕,开启朝向服务 override func touchesBegan(_ touches: Set&lt;UITouch&gt;, with event: UIEvent?) &#123; // 判断磁力计是否可用 if CLLocationManager.headingAvailable() &#123; // 开始监听当前设备朝向 locationM.startUpdatingHeading() &#125;else &#123; print("无法识别当前设备磁力计") &#125; &#125;&#125; 通过代理获得相关信息 CLHeading 常用属性: magneticHeading: 设备与磁北的相对方向; trueHeading: 设备与真北的相对方向; headingAccuracy: 方向值的错误范围; timestamp: 方向值的生成时间; x(y,z): 获取该设备在x(y,z)方向上监听得到的原始磁力值(单位:微特斯拉)。 1234567891011121314extension MainViewController: CLLocationManagerDelegate &#123; func locationManager(_ manager: CLLocationManager, didUpdateHeading newHeading: CLHeading) &#123; // 获得设备朝向 let magnetic = newHeading.magneticHeading // 角度转弧度 let angle = CGFloat(magnetic / 180 * .pi) // 旋转(动画) UIView.animate(withDuration: 1.0) &#123; self.compassImageView.transform = CGAffineTransform(rotationAngle: -angle) &#125; &#125;&#125; 区域检测 iOS 8.0 及以后,需要主动请求用户授权 12345678910111213141516171819202122232425262728293031323334353637import CoreLocationclass MainViewController: UIViewController &#123; // 管理者对象 lazy var locationM: CLLocationManager = &#123; let locationM = CLLocationManager() locationM.delegate = self // 主动请求授权 if #available(iOS 8.0, *) &#123; locationM.requestWhenInUseAuthorization() &#125; return locationM &#125;() // 开启区域监听 override func touchesBegan(_ touches: Set&lt;UITouch&gt;, with event: UIEvent?) &#123; // 确定监听区域可识别 if CLLocationManager.isMonitoringAvailable(for: CLCircularRegion.self) &#123; // 设置监听区域 let center = CLLocationCoordinate2D(latitude: 23.126, longitude: 113.395) var radius: CLLocationDistance = 1000 if distance &gt;= locationM.maximumRegionMonitoringDistance &#123; distance = locationM.maximumRegionMonitoringDistance &#125; let identifier: String = "区域标识" let circularRegion = CLCircularRegion(center: center, radius: radius, identifier: identifier) // 开始区域监听 locationM.startMonitoring(for: circularRegion) // 请求监听状态 locationM.requestState(for: region) &#125; &#125;&#125; 通过代理获得相关信息123456789101112131415161718192021222324extension MainViewController: CLLocationManagerDelegate &#123; func locationManager(_ manager: CLLocationManager, didStartMonitoringFor region: CLRegion) &#123; print("开启区域监听") &#125; func locationManager(_ manager: CLLocationManager, didEnterRegion region: CLRegion) &#123; print("进入该区域") &#125; func locationManager(_ manager: CLLocationManager, didExitRegion region: CLRegion) &#123; print("离开该区域") &#125; func locationManager(_ manager: CLLocationManager, didDetermineState state: CLRegionState, for region: CLRegion) &#123; switch state &#123; case .inside: print("进入该区域") case .outside: print("离开该区域") default: print("无法识别") &#125; &#125;&#125;]]></content>
      <categories>
        <category>iOS笔记</category>
      </categories>
      <tags>
        <tag>系统框架</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[FMDB框架]]></title>
    <url>%2F2017%2F12%2F10%2FFMDB%E6%A1%86%E6%9E%B6%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;&emsp;SQLite 是一个轻量级的关系数据库。由于原生的 SQLite API 对用户并不是很友好。于是, 开源社区中出现了一系列对 SQLite API 封装的库，而 FMDB 是最好用的。 FMDB组成 FMDatabase: 提供数据库的类，用于执行“数据库语句” FMResultset: 用于查询数据，除了删除都是查询 FMDatabaseQueue: 用于多线程下查询和更新数据库，避免线程阻塞 使用说明导入资源文件,定义全局数据库对象12#import &lt;FMDatabase.h&gt;static FMDatabase* db = nil; 数据库的保存路径123- (NSString *)getSqlitePath &#123; return [[NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES) firstObject] stringByAppendingPathComponent:@"DB.sqlite"];&#125; 创建数据库 数据库只需要创建下一次,当该文件不存在时, FMDB 会自动创建如果你传入的路径是空串:@&quot;&quot;,FMDB会在临时文件目录下创建一个数据库,相当于:[FMDatabase databaseWithPath:@&quot;/tmp/tmp.db&quot;]如果你传入的路径是:NULL，它会建立一个在内存中的数据库 1db = [FMDatabase databaseWithPath:[self getSqlitePath]]; 打开/关闭数据库 数据库需要打开才能进行操作,操作完成要关闭数据库 1234if(![db open]) &#123; // 提示错误信息 return;&#125;[db close]; 执行更新操作 除”查询”操作,”增删改销毁”都统称: 更新操作如果使用占位符:?,只能给占位符传递对象,传递基本数据类型会报错 12345678if([db open]) &#123; NSString *sql_stmt = @"create table if not exists t_person (id integer primary key autoincrement, lastname text not null, firstname text not null);"; BOOL success = [db executeUpdate: sql_stmt]; sql_stmt = @"insert into t_person(lastname, firstname) values(?, ?);"; success = [db executeUpdate: sql_stmt, person.lastname, person.firstname];&#125;[db close]; 执行查询操作 即使操作结果只有1条,也必须执行:[resultSet next] 123456789if([db open]) &#123; FMResultSet *resultSet = [db executeQuery:@"select * from t_people;"]; while ([resultSet next]) &#123; // 根据"下标/列名"获得对应的数据 int ID = [set intForColumnIndex:0]; NSString *lastname = [set stringForColumn: @"lastname"]; NSString *firstname = [set stringForColumn: @"firstname"]; &#125;&#125;[db close]; 线程安全 FMDatabase: 该类本身并不是线程安全的,不可在多线程中共用一个对象并且同时使用,不然会造成数据混乱等问题如果我们的 app 需要多线程操作数据库，那么就需要使用FMDatabaseQueue来保证线程安全 1234567891011121314151617 // 只要创建数据库队列对象, FMDB内部就会自动给我们加载数据库对象(最好放在单例中实现)FMDatabaseQueue *queue = [FMDatabaseQueue databaseQueueWithPath:[self getSqlitePath]];// 执行操作[queue inDatabase:^(FMDatabase *db) &#123; NSString *sql_stmt = @"create table if not exists t_student (id integer primary key autoincrement, name text not null, score real default 60.0);"; [db executeUpdate: sql_stmt];&#125;];// 事务(大批量数据处理优化)[queue inTransaction:^(FMDatabase *db, BOOL *rollback) &#123; NSString *sql_stmt = @"insert into t_student(name, score) values(?, ?);"; [db executeUpdate: sql_stmt, student.name, student.score]; sql_stmt = @"UPDATE t_student set name = '贝克汉姆' where name = '张三';"; [db executeUpdate: sql_stmt];&#125;]; 执行多条SQL语句 block返回值: 0,表示读取所有的数据(具体数值,返回具体列的数据,数值超出列的个数,默认返回第一列的数据) 12345678910111213NSString *sql_stmt = @"create table if not exists t_role(id integer primary key autoincrement, name text, age integer, sex text, score real);" "insert into t_role(name, age, sex, score) values('Jack', 27, '男', 89.0);" "insert into t_role(name, age, sex, score) values('包拯', 47, '男', 99.0);" "update t_role set name = '展昭' where name = 'Jack';";// 正常状态[DB executeStatements: sql_stmt];// 存在查询语句,使用如下方法获得查询到的数据(字典中的值都是"NSString"对象)[db executeStatements:sql_stmt withResultBlock:^int(NSDictionary * _Nonnull resultsDictionary) &#123; NSLog(@"%@", resultsDictionary); return 0;&#125;]];]]></content>
      <categories>
        <category>iOS笔记</category>
      </categories>
      <tags>
        <tag>第三方框架</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SQLites数据库]]></title>
    <url>%2F2017%2F12%2F07%2FSQLite%E6%95%B0%E6%8D%AE%E5%BA%93%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;&emsp;SQLite，是一款轻型的数据库，是遵守ACID的关系型数据库管理系统，它包含在一个相对小的C库中。它的设计目标是嵌入式的，占用资源非常的低，可能只需要几百K的内存就够了。它能够支持Windows/Linux/Unix等等主流的操作系统，同时能够跟很多程序语言相结合，比如 Tcl、C#、PHP、Java等，还有ODBC接口，同样比起Mysql、PostgreSQL这两款开源的世界著名数据库管理系统来讲，它的处理速度比他们都快。 SQLite的具体实现导入资源文件,定义全局数据库对象12#import &lt;sqlite3.h&gt;static sqlite3 *DB = nil; 获得数据库的保存路径123- (NSString *)getSqlitePath &#123; return [[NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES) firstObject] stringByAppendingPathComponent:@&quot;DB.sqlite&quot;];&#125; 数据库的打开与关闭 打开数据库,如果数据库不存在,会自动创建数据库数据库的每次操作(如:插入,删除,更新等)完成时,都必须关闭数据库 12345678- (BOOL)openSqlite &#123; char const *sqlitePath = [[self getSqlitePath] UTF8String]; return (sqlite3_open(sqlitePath, &amp;DB) == SQLITE_OK);&#125;- (void)closeSqlite &#123; sqlite3_close(DB);&#125; 执行数据库语句1234- (BOOL)execSql:(NSString *)sql &#123; char const *sql_stmt = sql.UTF8String; return sqlite3_exec(DB, sql_stmt, NULL, NULL, NULL) == SQLITE_OK;&#125; 数据记录表格的创建与删除123456789- (BOOL)createTable &#123; NSString *sql_stmt = @"create table if not exists t_stu(id integer primary key autoincrement, name text, age integer, sex text, score real)"; return [self execSql:sql_stmt];&#125;- (BOOL)dropTable&#123; NSString *sql_stmt = @"drop table if exists t_stu"; return [self execSql:sql_stmt];&#125; 事务的开启与提交 如果使用sqlite_exec或sqlite_step()执行数据库语句时,系统将自动对事务进行操作(开启/提交) 事务的开启与提交会消耗大量的时间,如果进行大批量数据操作,系统会多次开启/提交事务,大大影响程序的执行效率 优化方案: 在开始处理数据时,手动开启”事务”,数据处理完成后,手动关闭”事务”,系统将不会自动开启/提交事务 123456789- (BOOL)beginTransaction &#123; NSString *sql_stmt = @&quot;begin transaction&quot;; return [sqliteTool execSql:sql_stmt];&#125;- (BOOL)commitTransaction &#123; NSString *sql_stmt = @&quot;commit transaction&quot;; return [sqliteTool execSql:sql_stmt];&#125; 存储数据-&gt;数据表 方法一: 正常数据存储 1234- (BOOL)insertDataInTableOfSqlite:(StudentModel *)stuModel &#123; NSString *sql_stmt = [NSString stringWithFormat:@"insert into t_stu(name, age, sex, score) values ('%@', %ld, '%@', %.1f)", stuModel.name, stuModel.age, stuModel.sex, stuModel.score]; return [self execSql:sql_stmt];&#125; 方法二: 大批量数据存储 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253- (void)insertDataInTableOfSqlite &#123; // ?: 表示预留值 char const *sql_stmt = [@"insert into t_stu(name, age, sex, score) values (?, ?, ?, ?)" UTF8String]; /** * 根据"sql_stmt",生成"准备语句" * * 参数1: 数据库对象 * 参数2: 数据库执行语句 * 参数3: 提取的字符串长度 (-1: 自动计算) * 参数4: 预处理语句(准备语句) * 参数5: 根据"参数3"提取的长度后,剩余的字符串 */ sqlite3_stmt *sqlite_stmt; if (sqlite3_prepare_v2(DB, sql_stmt, -1, &amp;sqlite_stmt, NULL) != SQLITE_OK) return; // 开启事务 [self beginTransaction]; // 插入数据(数据的个数: 10000) for (NSInteger index = 0; index &lt; self.stuModels.count; index ++) &#123; // 获得学生数据 StudentModel *stuModel = self.stuModels[index]; /** * 参数绑定(偷懒: runtime???) * * 参数1: 准备语句 * 参数2: 数据表中的列参数索引 * 参数3: 绑定的值 * 参数4: 值提取的长度(-1: 自动计算) * 参数5: 值的处理方式 SQLITE_STATIC: 认为参数是常量,不会被释放(不做任何引用) SQLITE_TRANSIENT: 对参数进行引用 */ sqlite3_bind_text(sqlite_stmt, 1, stuModel.score, -1, SQLITE_TRANSIENT); sqlite3_bind_int(sqlite_stmt, 2, stuModel.age); sqlite3_bind_text(sqlite_stmt, 3, stuModel.sex, -1, SQLITE_TRANSIENT); sqlite3_bind_double(sqlite_stmt, 4, stuModel.score); // 执行准备语句 if(sqlite3_step(sqlite_stmt) == SQLITE_DONE) NSLog(@"执行成功"); // 重置语句(不管"成功/失败"都要执行) sqlite3_reset(sqlite_stmt); &#125; // 提交事务 [self commitTransaction]; // 释放准备语句 sqlite3_finalize(sqlite_stmt);&#125; 查询(获取)数据-&gt;数据表1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556- (NSArray *)selectDataInTableOfSqlite &#123; char const *sql_stmt = [@"select * from t_stu" UTF8String]; // 获得准备语句 sqlite3_stmt *sqlite_stmt; if(sqlite3_prepare_v2(DB, sql_stmt, -1, &amp;sqlite_stmt, NULL) != SQLITE_OK) return nil; // 保存搜索查询到的数据 NSMutableArray *stuModels = [NSMutableArray array]; // 开启事务 [self.sqliteTool beginTransaction]; while(sqlite3_step(sqlite_stmt) == SQLITE_ROW) &#123; StudentModel *stuModel = [[StudentModel alloc] init]; // 获得数据表中列的个数 int count = sqlite3_column_count(sql_stmt); for (int index = 0; index &lt; count; index ++) &#123; if(index == 0) continue; // 数据表的唯一标识 // 获得列的名称 NSString *key = [NSString stringWithUTF8String:sqlite3_column_name(sql_stmt, index)]; // 获得列的类型 int type = sqlite3_column_type(sql_stmt, index); // 根据类型执行对应的方法 switch (type) &#123; case SQLITE_INTEGER: &#123; int value = sqlite3_column_int(sql_stmt, index); [stuModel setValue:@(value) forKey:key]; break; &#125; case SQLITE_FLOAT: &#123; double value = sqlite3_column_double(sql_stmt, index); [stuModel setValue:@(value) forKey:key]; break; &#125; case SQLITE_TEXT: &#123; NSString *value = [NSString stringWithUTF8String:(char const *)sqlite3_column_text(sql_stmt, index)]; [stuModel setValue:value forKey:key]; break; &#125; default: break; &#125; &#125; [stuModels addObject:stuModel]; &#125; // 提交事务 [self commitTransaction]; // 释放准备语句 sqlite3_finalize(sql_stmt); return [stuModels copy];&#125;]]></content>
      <categories>
        <category>iOS笔记</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
</search>
